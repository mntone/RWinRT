using Mntone.RWinRT.Generators.CSharp.BlockWriters;
using Mntone.RWinRT.Generators.CSharp.UnitWriters;
using Mntone.RWinRT.Generators.UnitWriters;
using System.Linq;

namespace Mntone.RWinRT.Generators.CSharp
{
	public static class CSharpAutogen2

	{
		public static string[] Headers { get; } =
		{
			"//------------------------------------------------------------------------------",
			"// <auto-generated>",
			$"//     This file was generated by R/WinRT v{typeof(Program).Assembly.GetName().Version}",
			"//",
			"//     Changes to this file may cause incorrect behavior and will be lost if",
			"//     the code is regenerated.",
			"// </auto-generated>",
			"//------------------------------------------------------------------------------",
			"#nullable enable",
			"",
			"// R/WinRT (C#)",
			"//",
			$"// Copyright (C) {System.DateTime.UtcNow.Year} {System.Diagnostics.FileVersionInfo.GetVersionInfo( typeof(Program).Assembly.Location).CompanyName}.",
			"// Licensed under the MIT License.",
			"",
			"using System;",
			"",
		};

		public static string[] Body { get; } =
		{
			"private sealed class __<0>_ResourceManager : global::RWinRT.ResourceManager",
			"{",
			"<indent>public static __<0>_ResourceManager Instance { get; } = new __<0>_ResourceManager();",
			"<indent>public __<0>_ResourceManager() : base(\"<0>\") { }",
			"}",
			"",
			"/// <summary>",
			"/// Gets the localized text associated with the resource ID.",
			"/// </summary>",
			"/// <param name=\"resourceId\">The resource ID.</param>",
			"/// <returns>A string containing the localized text for the ID specified.</returns>",
			"public static string GetValue(this R resourceId)",
			"{",
			"<indent>return __<0>_ResourceManager.Instance.GetValueCore(resourceId.GetKey());",
			"}",
			"",
			"/// <summary>",
			"/// Gets the formatted and localized text associated with the resource ID.",
			"/// </summary>",
			"/// <param name=\"resourceId\">The resource ID.</param>",
			"/// <param name=\"args\">An object array that contains zero or more objects to format.</param>",
			"/// <returns>A string containing the formatted and localized text for the ID specified.</returns>",
			"<outdent>#if NET6_0_OR_GREATER || NETSTANDARD2_1_OR_GREATER",
			"public static string GetFormatValue(this R resourceId, params object?[] args)",
			"<outdent>#else",
			"public static string GetFormatValue(this R resourceId, params object[] args)",
			"<outdent>#endif",
			"{",
			"<indent>return __<0>_ResourceManager.Instance.GetFormatValueCore(resourceId.GetKey(), args);",
			"}",
			"",
		};

		private static void WriteSection(CSharpWriterContext ctx, string type, ResourcesData data)
		{
			using (Enum.Block(ctx, "R"))
			{
				foreach (var resource in data.Resources)
				{
					EnumValue.Write(ctx, resource.Name, resource.Value);
				}
			}

			using (StaticClass.Block(ctx, "RExtensions"))
			{
				Raw.Write(ctx, Body.Select(v => v.Replace("<0>", type)).ToArray());
				
				using (AccessorBlock.Block(ctx, "static string GetKey(this R resourceId)"))
				{
					using (Switch.Block(ctx, "resourceId"))
					{
						foreach (var resource in data.Resources)
						{
							EnumCase.Write(ctx, "R", resource.Name);
						}
					}
					ThrowNew.Write(ctx, "ArgumentException", "resourceId");
				}
			}
		}

		public static string Build(CSharpWriterContext ctx, ResourcesData defaultResource, ResourcesData[] resources)
		{
			// Write headers
			Raw.Write(ctx, Headers);

			// Write root namespace
			using (Namespace.Block(ctx, ctx.RootNamespace))
			{
				WriteSection(ctx, defaultResource.ResourceType, defaultResource);
				foreach (var resource in resources)
				{
					using (Namespace.Block(ctx, resource.ResourceType))
					{
						WriteSection(ctx, resource.ResourceType, resource);
					}
				}
			}
			return ctx.Builder.ToString();
		}
	}
}
