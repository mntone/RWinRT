using Mntone.RWinRT.Generators.Cpp.BlockWriters;
using Mntone.RWinRT.Generators.Cpp.UnitWriters;
using Mntone.RWinRT.Generators.UnitWriters;

namespace Mntone.RWinRT.Generators.Cpp
{
	public static class CppAutogen2
	{
		public static string[] Headers { get; } =
		{
			$"// WARNING: Please don't edit this file. It was generated by R/WinRT v{typeof(Program).Assembly.GetName().Version}",
			"",
			"#pragma once",
			"// R/WinRT (C++)",
			"//",
			$"// Copyright (C) {System.DateTime.UtcNow.Year} {System.Diagnostics.FileVersionInfo.GetVersionInfo( typeof(Program).Assembly.Location).CompanyName}.",
			"// Licensed under the MIT License.",
			"",
			"#include <string_view>",
			"#include <vector>",
			"",
			"#ifdef USE_RESOURCE_CACHE",
			"#include <unordered_map>",
			"#endif",
			"",
			"#include <winrt/base.h>",
			"#include <winrt/Windows.Foundation.h>",
			"#include <winrt/Windows.Foundation.Collections.h>",
			"#include <winrt/Microsoft.Windows.ApplicationModel.Resources.h>",
			"",
		};

		public static string BaseFilename { get; } = "res/base.h";

		public static string SuppressKeyword { get; } = "SUPPRESS_RESOURCES_ALIAS";

		private static void WriteSection(CppWriterContext ctx, ResourcesData data)
		{
			// Write enums
			var type = data.Resources.Length < byte.MaxValue
				? "unsigned char"
				: "unsigned short";
			using (Enum.Block(ctx, "Resources", type))
			{
				EnumValue.Build(ctx, data);
			}

			// Write enum alias
			using (Ifndef.Block(ctx, SuppressKeyword))
			{
				Alias.Write(ctx, "Resources", "R");
			}

			// Write res_v<T>.
			using (Namespace.Block(ctx, ctx.ImplNamespace))
			{
				ResourceHeader.Write(ctx, "Resources");
				foreach (var resource in data.Resources)
				{
					Resource.Write(ctx, "Resources", resource.Name);
				}
			}
		}

		public static string Build(CppWriterContext ctx, ResourcesData defaultResource, ResourcesData[] resources)
		{
			// Write headers
			Raw.Write(ctx, Headers);

			// Write root namespace
			using (Namespace.Block(ctx, ctx.RootNamespace))
			{
				// Build enums
				WriteSection(ctx, defaultResource);
				foreach (var resource in resources)
				{
					using (Namespace.Block(ctx, resource.ResourceType))
					{
						WriteSection(ctx, resource);
					}
				}

				// Write __namespace_of
				using (Namespace.Block(ctx, ctx.ImplNamespace))
				{
					NamespaceOfHeader.Write(ctx);
					NamespaceOf.Write(ctx, "Resources", defaultResource.ResourceType, ctx.ImplNamespace, defaultResource.IsDefault.ToString());
					foreach (var resource in resources)
					{
						NamespaceOf.Write(ctx, "Resources", resource.ResourceType, ctx.ImplNamespace, resource.IsDefault.ToString());
					}
				}

				// Write include "base.h".
				using (Define.Block(ctx, "IMPL", ctx.ImplNamespace))
				{
					Include.Write(ctx, BaseFilename);
				}
			}
			return ctx.Builder.ToString();
		}
	}
}

