using Mntone.RWinRT.Generators.Cpp.BlockWriters;
using Mntone.RWinRT.Generators.Cpp.UnitWriters;
using Mntone.RWinRT.Generators.UnitWriters;
using System;

namespace Mntone.RWinRT.Generators.Cpp
{
	public static class CppAutogen1
	{
		public static string[] Headers { get; } =
		{
			$"// WARNING: Please don't edit this file. It was generated by R/WinRT v{typeof(Program).Assembly.GetName().Version}",
			"",
			"#pragma once",
			"// R/WinRT (C++)",
			"//",
			$"// Copyright (C) {DateTime.UtcNow.Year} {System.Diagnostics.FileVersionInfo.GetVersionInfo( typeof(Program).Assembly.Location).CompanyName}.",
			"// Licensed under the MIT License.",
			"",
			"#include <string_view>",
			"",
		};

		private static void WriteSection(CppWriterContext ctx, ResourcesData data)
		{
			foreach (var resource in data.Resources)
			{
				ConstexprVariable.Write(ctx, resource.Name, resource.Value);
			}
		}

		public static string Build(CppWriterContext ctx, ResourcesData defaultResource, ResourcesData[] resources)
		{
			// Write headers
			Raw.Write(ctx, Headers);

			// Write root namespace
			using (Namespace.Block(ctx, ctx.RootNamespace))
			{
				using (Namespace.Block(ctx, "R"))
				{
					WriteSection(ctx, defaultResource);
				}
				foreach (var resource in resources)
				{
					using (Namespace.Block(ctx, resource.ResourceType + "::R"))
					{
						WriteSection(ctx, resource);
					}
				}
			}
			return ctx.Builder.ToString();
		}
	}
}
